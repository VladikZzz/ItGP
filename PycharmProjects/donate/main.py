from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, CallbackQuery
from aiogram.utils import executor
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text

bot = Bot('5247379382:AAFgWDJRuRAoH81PxZg9gZ8rT2qKfTwiYVI')  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    make_offer_button = KeyboardButton('üí∏ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å')
    about = KeyboardButton('üìö –û –Ω–∞—Å')
    greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    greet_kb.row(make_offer_button, about)

    await message.answer("‚ùó<b>–°–∞–π—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏ –∂–∏—Ç–µ–ª—è–º –£–∫—Ä–∞–∏–Ω—ã –±–ª–æ–∫–∏—Ä—É—é—Ç, –±–∞–Ω–∫–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç —Å—á–µ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã "
                         "—Å–æ–±–∏—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º c –ø–æ–º–æ—â—å—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.</b>‚ùó\n\n<b>üôå –ü–æ—á–µ–º—É –Æ–ù–ò–°–ï–§? </b> "
                         "\n–í–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ö–æ—Ä–æ—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: \n\nüî∫ <b>–Æ–ù–ò–°–ï–§</b> –ø–æ–º–æ–≥ "
                         "—Å–ø–∞—Å—Ç–∏ –±–æ–ª—å—à–µ –¥–µ—Ç—Å–∫–∏—Ö –∂–∏–∑–Ω–µ–π - 90 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 1990 –≥–æ–¥–∞, - —á–µ–º –ª—é–±–∞—è "
                         "–¥—Ä—É–≥–∞—è –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è. \n\nüî∫ <b>–Æ–ù–ò–°–ï–§</b> —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –≤ –º–∏—Ä–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –≥–æ—Ç–æ–≤–æ–≥–æ –∫ "
                         "—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è ‚Äî –ø–∞—Å—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤ "
                         "—Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å –≤–µ—Ä–Ω—É—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Ä–µ–±–µ–Ω–∫—É, —Å—Ç—Ä–∞–¥–∞—é—â–µ–º—É –æ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.\n\nüî∫ "
                         "<b>–Æ–ù–ò–°–ï–§</b> –ø—Ä–æ–≤–æ–¥–∏—Ç –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—é –æ–∫–æ–ª–æ 40 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–µ—Ç–µ–π –≤–æ –≤—Å–µ–º –º–∏—Ä–µ.",
                         reply_markup=greet_kb, parse_mode=types.ParseMode.HTML)



@dp.message_handler(Text(equals='üí∏ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'))
async def donate(message: types.Message):
    button1 = types.InlineKeyboardButton(text='BTC', callback_data='BTC')
    button2 = types.InlineKeyboardButton(text='ETH-ERC20', callback_data='ETH-ERC20')
    button3 = types.InlineKeyboardButton(text='USDT-TRC20', callback_data='USDT-TRC20')
    button4 = types.InlineKeyboardButton(text='USDT-ERC20', callback_data='USDT-ERC20')

    buttons = [button1, button2, button3, button4]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>', reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


@dp.message_handler(Text(equals='üìö –û –Ω–∞—Å'))
async def donate(message: types.Message):
    await message.answer(
                         "üá∫üá¶ –°–µ–π—á–∞—Å, –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞, –º—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Å–≤–æ–∏ —É—Å–∏–ª–∏—è –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –£–∫—Ä–∞–∏–Ω—Å–∫–æ–º—É –Ω–∞—Ä–æ–¥—É.  "
                         "–î–µ–ª–∞—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è, –í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å –Ω–µ —Ç–æ–ª—å–∫–æ "
                         "–∞—Ä–º–∏–∏ –∏ —Ä–∞–Ω–µ–Ω–Ω—ã–º, –Ω–æ –∏ –º–µ–¥–∏–∫–∞–º, –±–µ–∂–µ–Ω—Ü–∞–º, –¥–µ—Ç—è–º –∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º.\n\n<b>–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π —à—Ç–∞–± "
                         "–ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –ø–æ 4-–º –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:</b>\n\n‚ùó –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è <b>—ç–≤–∞–∫—É–∞—Ü–∏–∏ –ª—é–¥–µ–π</b> –∏–∑ –∑–æ–Ω—ã "
                         "–≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. \n\n‚ùó –î–æ—Å—Ç–∞–≤–∫–∞ <b>–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø–æ–º–æ—â–∏</b> (–ø—Ä–æ–¥—É–∫—Ç—ã, –≤–æ–¥–∞, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, "
                         "—Å—Ä–µ–¥—Å—Ç–≤–∞ –≥–∏–≥–∏–µ–Ω—ã –∏ —Ç.–¥.) –≤ –∑–æ–Ω—É –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. \n\n‚ùó <b>–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω—Ü–µ–≤</b> –Ω–∞ –±–∞–∑–∞—Ö, "
                         "–≤ —Å–∞–Ω–∞—Ç–æ—Ä–∏—è—Ö –∏ –ª–∞–≥–µ—Ä—è—Ö –≤–Ω–µ –∑–æ–Ω—ã –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. \n\n‚ùó <b>–û–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–Ω–æ–π –ø–æ–º–æ—â–∏</b> –¥–µ—Ç—è–º, "
                         "–ø–æ—Ç–µ—Ä—è–≤—à–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∑–æ–Ω–µ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.–ö–∞–∂–¥–æ–µ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ —à—Ç–∞–±–∞ "
                         "–∏–º–µ–µ—Ç —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Å—Ç–∞—Ö (–≤ –∑–æ–Ω–µ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –≤ –º–µ—Å—Ç–∞—Ö –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ "
                         "–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ–ª–µ–Ω—Ü–µ–≤) –∏ —Ç–µ—Å–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–º–∏ "
                         "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –æ–±–ª–∞—Å—Ç–Ω—ã–º–∏ –¥–µ—Ä–∂–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏.", parse_mode=types.ParseMode.HTML)



@dp.callback_query_handler(state='*', text='BTC')
async def BTC(call: types.CallbackQuery):
    await call.message.answer("<b>BTC –∫–æ—à—ë–ª–µ–∫: \n</b>bc1qgj97tka0p3nw67tgrfgtlujdqtrw5wpshf5324", parse_mode=types.ParseMode.HTML)
    await call.answer()


@dp.callback_query_handler(state='*', text='ETH-ERC20')
async def ETH(call: types.CallbackQuery):
    await call.message.answer("<b>ETH-ERC20 –∫–æ—à–µ–ª—ë–∫: \n</b>0x4FB29e919310522a7d9a3EB2570DfAf6dF205fBF", parse_mode=types.ParseMode.HTML)
    await call.answer()


@dp.callback_query_handler(state='*', text='USDT-ERC20')
async def USDT_E(call: types.CallbackQuery):
    await call.message.answer("<b>USDT-ERC20 –∫–æ—à–µ–ª—ë–∫: \n</b>0x4FB29e919310522a7d9a3EB2570DfAf6dF205fBF", parse_mode=types.ParseMode.HTML)
    await call.answer()


@dp.callback_query_handler(state='*', text='USDT-TRC20')
async def USDT_T(call: types.CallbackQuery):
    await call.message.answer("<b>USDT-TRC20 –∫–æ—à–µ–ª—ë–∫: \n</b>TNzpxpaEQbHRBfsC6jJGAH4FWu2pYkiu7N", parse_mode=types.ParseMode.HTML)
    await call.answer()


if __name__ == '__main__':
    executor.start_polling(dp)