import operator
from datetime import datetime

import aiogram
from aiogram import types
from aiogram.types import \
    ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.callback_data import CallbackData
import api
import config
from loader import dp, bot
from utils import States
from aiogram.dispatcher import FSMContext

my_info = KeyboardButton('üíº –ö–æ—à–µ–ª—ë–∫')
ads = KeyboardButton('üîÑ –û–±–º–µ–Ω')
save_dep = KeyboardButton('üí∞ –î–µ–ø–æ–∑–∏—Ç')
about_us = KeyboardButton('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
web = KeyboardButton('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è')
app = KeyboardButton('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')

user_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(my_info,
                                                                     ads,
                                                                     save_dep,
                                                                     about_us,
                                                                     web,
                                                                     app
                                                                     )

cb2 = CallbackData("post", "id", "action")


@dp.message_handler(state='*',
                    text='üíº –ö–æ—à–µ–ª—ë–∫')
async def my_account(msg: types.Message):
    state = dp.current_state(user=msg.from_user.id)
    await state.set_state(States.USER_STATE[0])
    try:
        u = api.get_user_info(msg.from_user.id)
        if u['state'] != 'banned':
            lim = str(u['limit'])
            c_lim = str(u['current_limit'])
            USDT_balance = str(u['USDT_balance'])
            TRX_balance = str(u['TRX_balance'])
            XLM_balance = str(u['XLM_balance'])
            ADA_balance = str(u['ADA_balance'])
            DOGE_balance = str(u['DOGE_balance'])
            MATIC_balance = str(u['MATIC_balance'])
            LUNA_balance = str(u['LUNA_balance'])
            DOT_balance = str(u['DOT_balance'])
            AVAX_balance = str(u['AVAX_balance'])
            name = u['username']
            button1 = types.InlineKeyboardButton(text='‚¨Ü –í–≤–æ–¥', callback_data='in')
            button2 = types.InlineKeyboardButton(text='‚¨á –í—ã–≤–æ–¥', callback_data='out')
            buttons_ = [button1, button2]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons_)
            code = 'REF'+str(int(u['tg_id']) // 5 + 123)

            m = '<b>üíµ –ë–∞–ª–∞–Ω—Å:\n\n</b><b>USDT: </b>' + USDT_balance + '\n' + '<b>TRX: </b>' + TRX_balance  + '\n<b>XLM: </b>' + XLM_balance+ '\n<b>ADA: </b>' + ADA_balance + '\n<b>DOGE: </b>' + DOGE_balance+ '\n<b>MATIC: </b>' + MATIC_balance + '\n<b>LUNA: </b>' + LUNA_balance + '\n<b>DOT: </b>' + DOT_balance + '\n<b>AVAX: </b>' + AVAX_balance + '\n\n' + '<b>üìå –õ–∏–º–∏—Ç—ã:\n\n</b><b>–ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: </b>' + lim + '\n' + '<b>–û—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é: </b>' + c_lim + '\n\n '
            if float(lim) < 10001:
                await msg.answer(f"<b>üôéüèº‚Äç‚ôÇ {name} Bronze ü•â</b>\n\n" + m, parse_mode=types.ParseMode.HTML,
                                 reply_markup=keyboard)
            elif 10000 < float(lim) < 25001:
                await msg.answer(f"<b>üôéüèº‚Äç‚ôÇ {name} Silver ü•à</b>\n\n" + m, parse_mode=types.ParseMode.HTML,
                                 reply_markup=keyboard)
            elif 25000 < float(lim) < 50001:
                await msg.answer(f"<b>üôéüèº‚Äç‚ôÇ {name} Gold ü•â</b>\n\n" + m, parse_mode=types.ParseMode.HTML,
                                 reply_markup=keyboard)
            elif float(lim) > 50000:
                await msg.answer(f"<b>üôéüèº‚Äç‚ôÇ {name} Diamond üíé</b>\n\n" + m, parse_mode=types.ParseMode.HTML,
                                 reply_markup=keyboard)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                                      parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.message_handler(state='*',
                    text='üîÑ –û–±–º–µ–Ω')
async def ads(msg: types.Message):
    u = api.get_user_info(msg.from_user.id)
    #if u == {'message': 'The user does not exist'}:
    try:
        if u['state'] != 'banned':
            ads = api.get_ads()
            buttons = []
            for ad in ads:
                owner_info = api.get_user_info(ad['owner_id'])
                api.change_ad_amount(ad['id'], owner_info['USDT_balance'])

            ads = api.get_ads()
            for ad in ads:
                if ad['max_amount'] < ad['min_amount']:
                    api.change_ad_state(ad['id'], False)

                if ad['max_amount'] >= ad['min_amount'] and ad['state'] == False:
                    api.change_ad_state(ad['id'], True)

            ads = api.get_ads()
            fake_ads = api.get_fake_ads()
            if (len(ads) + len(fake_ads)) % 10 == 0:
                k = (len(ads) + len(fake_ads)) // 10
            else:
                k = (len(ads) + len(fake_ads)) // 10 + 1

            all_ads = ads + fake_ads
            all_ads.sort(key=operator.itemgetter('max_amount'))
            all_ads.reverse()

            lst = all_ads[slice(0, 10)]

            for ad in lst:
                if ad in ads:
                    owner_info = api.get_user_info(ad['owner_id'])

                    if ad['state'] and owner_info['state'] == 'working':
                        button = types.InlineKeyboardButton(text='üçã' + owner_info['username'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                                                            callback_data=cb2.new(id=str(ad['id']), action="user_ad"))

                        buttons.append(button)

                elif ad in fake_ads:
                    button = types.InlineKeyboardButton(
                        text='üçã' + ad['owner_name'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                        callback_data=cb2.new(id=str(ad['id']), action="fake_ad"))
                    buttons.append(button)

            button1 = types.InlineKeyboardButton(text='üìã –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                                                callback_data='my_add')
            button2 = types.InlineKeyboardButton(text='üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏',
                                                 callback_data='my_trades')

            prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k) + '/' + str(k), callback_data=cb2.new(id=k, action="prev"))
            if k == 0:
                next = types.InlineKeyboardButton(text=str(0) + '/' + str(k) + ' ‚ñ∂', callback_data=cb2.new(id=0, action="next"))
            elif k < 2:
                next = types.InlineKeyboardButton(text=str(1) + '/' + str(k) + ' ‚ñ∂', callback_data=cb2.new(id=2, action="next"))
            else:
                next = types.InlineKeyboardButton(text=str(2) + '/' + str(k) + ' ‚ñ∂', callback_data=cb2.new(id=1, action="next"))
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)

            keyboard.row(prev, next)
            keyboard.row(button1, button2)
            mes = f'<b>üóì –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\n–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(all_ads)} –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ <b>TRX</b>, <b>SOL</b>, <b>AVAX</b>, <b>XRP</b>, ' \
                  f'<b>DOGE</b>, <b>DOT</b>, <b>LUNA</b>, <b>MATIC</b> –Ω–∞ <b>USDT</b>.\n\n'
            await msg.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            u_ad = api.get_user_ads(msg.from_user.id)

            if len(u_ad)!= 0 and api.get_user_info(msg.from_user.id)['USDT_balance'] < u_ad[0]['min_amount']:
                await msg.answer('<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã ...\n</b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –í–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ' + str(u_ad[0]['min_amount']) + ' USDT.', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.message_handler(state='*',
                    text='üí∞ –î–µ–ø–æ–∑–∏—Ç')
async def save_dep(msg: types.Message):
    u = api.get_user_info(msg.from_user.id)
    try:
        if u['state'] != 'banned':
            button1 = types.InlineKeyboardButton(text='‚¨Ü –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç', callback_data='dep_in')
            button2 = types.InlineKeyboardButton(text='‚¨á –ó–∞–±—Ä–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç', callback_data='dep_out')
            buttons_ = [button1, button2]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons_)
            await msg.answer('üí∞ <b>–î–µ–ø–æ–∑–∏—Ç</b>', reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.message_handler(state='*',
                    text='üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def about(msg: types.Message):
    u = api.get_user_info(msg.from_user.id)
    try:
        if u['state'] != 'banned':
            button1 = types.InlineKeyboardButton(text='üìñ –û –Ω–∞—Å', callback_data='about_us')
            button2 = types.InlineKeyboardButton(text='‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
            button3 = types.InlineKeyboardButton(text='üìç –ö–æ–º–∏—Å—Å–∏–∏', callback_data='comission')
            button4 = types.InlineKeyboardButton(text='üìÑ –£—Å–ª–æ–≤–∏—è', callback_data='conditions')
            button5 = types.InlineKeyboardButton(text='üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data='refs')
            button6 = types.InlineKeyboardButton(text='ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã', callback_data='partners')

            buttons_ = [button1, button2, button3, button4, button5, button6]

            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons_)

            await msg.answer('üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup=keyboard)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.message_handler(state='*',
                    text='üåê –í–µ–±-–≤–µ—Ä—Å–∏—è')
async def site(msg: types.Message):
    u = api.get_user_info(msg.from_user.id)
    try:
        if u['state'] != 'banned':
            """button1 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', url='https://google.com')
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)
            await msg.answer('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è', reply_markup=keyboard)"""
            await msg.answer('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è\n\n<b>–°–∞–π—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\nüéâ –°–∫–æ—Ä–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è Web-–≤–µ—Ä—Å–∏—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ —Å—Ç–∞–Ω–µ—Ç –µ—â—ë —É–¥–æ–±–Ω–µ–µ!', parse_mode=types.ParseMode.HTML)

        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.message_handler(state='*',
                    text='üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
async def about(msg: types.Message):
    u = api.get_user_info(msg.from_user.id)
    try:
        if u['state'] != 'banned':
            await msg.answer('<b>üõ† –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\nüéâ –°–∫–æ—Ä–æ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è IOS/Android –∏ '
                             '—Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ —Å—Ç–∞–Ω–µ—Ç –µ—â—ë —É–¥–æ–±–Ω–µ–µ!', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(cb2.filter(action=["next"]), state='*')
async def next_page(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            ads = api.get_ads()
            buttons = []
            for ad in ads:
                owner_info = api.get_user_info(ad['owner_id'])
                api.change_ad_amount(ad['id'], owner_info['USDT_balance'])

            ads = api.get_ads()
            for ad in ads:
                if ad['max_amount'] < ad['min_amount']:
                    api.change_ad_state(ad['id'], False)

                if ad['max_amount'] >= ad['min_amount'] and ad['state'] == False:
                    api.change_ad_state(ad['id'], True)

            k = int(callback_data['id'])
            start = 10 * (k - 1)
            stop = 10 * k

            ads = api.get_ads()
            fake_ads = api.get_fake_ads()

            if (len(ads) + len(fake_ads)) % 10 == 0:
                max_k = (len(ads) + len(fake_ads)) // 10
            else:
                max_k = (len(ads) + len(fake_ads)) // 10 + 1

            all_ads = ads + fake_ads
            all_ads.sort(key=operator.itemgetter('max_amount'))
            all_ads.reverse()

            lst = all_ads[slice(start, stop)]

            for ad in lst:
                if ad in ads:
                    owner_info = api.get_user_info(ad['owner_id'])

                    if ad['state'] and owner_info['state'] == 'working':
                        button = types.InlineKeyboardButton(
                            text='üçã' + owner_info['username'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                            callback_data=cb2.new(id=str(ad['id']), action="user_ad"))

                        buttons.append(button)
                elif ad in fake_ads:
                    button = types.InlineKeyboardButton(
                        text='üçã' + ad['owner_name'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                        callback_data=cb2.new(id=str(ad['id']), action="fake_ad"))
                    buttons.append(button)

            button1 = types.InlineKeyboardButton(text='üìã –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                                                 callback_data='my_add')
            button2 = types.InlineKeyboardButton(text='üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏',
                                                 callback_data='my_trades')
            if k == 0:
                prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k) + '/' + str(k),
                                                  callback_data=cb2.new(id=k, action="prev"))
                next = types.InlineKeyboardButton(text=str(0) + '/' + str(k) + ' ‚ñ∂',
                                                      callback_data=cb2.new(id=0, action="next"))
            elif k + 1 > max_k:
                if k - 1 == 0:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(max_k) + '/' + str(max_k), callback_data=cb2.new(id=max_k, action="prev"))
                else:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k - 1) + '/' + str(max_k), callback_data=cb2.new(id=max_k, action="prev"))
                next = types.InlineKeyboardButton(text=str(1) + '/' + str(max_k) + ' ‚ñ∂', callback_data=cb2.new(id=1, action="next"))

            else:
                if k - 1 == 0:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(max_k) + '/' + str(max_k), callback_data=cb2.new(id=k - 1, action="prev"))
                else:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k - 1) + '/' + str(max_k), callback_data=cb2.new(id=k - 1, action="prev"))

                next = types.InlineKeyboardButton(text=str(k + 1) + '/' + str(max_k) + ' ‚ñ∂', callback_data=cb2.new(id=k + 1, action="next"))

            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            keyboard.row(prev, next)
            keyboard.row(button1, button2)
            try:
                await call.message.edit_reply_markup(keyboard)
            except aiogram.utils.exceptions.MessageNotModified:
                await call.answer()
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=["prev"]), state='*')
async def prev_page(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            ads = api.get_ads()
            buttons = []
            for ad in ads:
                owner_info = api.get_user_info(ad['owner_id'])
                api.change_ad_amount(ad['id'], owner_info['USDT_balance'])

            ads = api.get_ads()
            for ad in ads:
                if ad['max_amount'] < ad['min_amount']:
                    api.change_ad_state(ad['id'], False)

                if ad['max_amount'] >= ad['min_amount'] and ad['state'] == False:
                    api.change_ad_state(ad['id'], True)

            k = int(callback_data['id'])
            start = 10 * (k - 1)
            stop = 10 * k

            ads = api.get_ads()
            fake_ads = api.get_fake_ads()

            if (len(ads) + len(fake_ads)) % 10 == 0:
                max_k = (len(ads) + len(fake_ads)) // 10
            else:
                max_k = (len(ads) + len(fake_ads)) // 10 + 1

            all_ads = ads + fake_ads
            all_ads.sort(key=operator.itemgetter('max_amount'))
            all_ads.reverse()

            lst = all_ads[slice(start, stop)]

            for ad in lst:
                if ad in ads:
                    owner_info = api.get_user_info(ad['owner_id'])

                    if ad['state'] and owner_info['state'] == 'working':
                        button = types.InlineKeyboardButton(
                            text='üçã' + owner_info['username'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                            callback_data=cb2.new(id=str(ad['id']), action="user_ad"))

                        buttons.append(button)
                elif ad in fake_ads:
                    button = types.InlineKeyboardButton(
                        text='üçã' + ad['owner_name'] + ' (' + str(ad['min_amount']) + ' - ' + str(ad['max_amount']) + ') USDT',
                        callback_data=cb2.new(id=str(ad['id']), action="fake_ad"))
                    buttons.append(button)

            button1 = types.InlineKeyboardButton(text='üìã –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                                                 callback_data='my_add')
            button2 = types.InlineKeyboardButton(text='üìù –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏',
                                                 callback_data='my_trades')

            if k == 0:
                prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k) + '/' + str(k),
                                                  callback_data=cb2.new(id=k, action="prev"))
                next = types.InlineKeyboardButton(text=str(0) + '/' + str(k) + ' ‚ñ∂',
                                                      callback_data=cb2.new(id=0, action="next"))

            elif k + 1 > max_k:
                if k - 1 == 0:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(max_k) + '/' + str(max_k), callback_data=cb2.new(id=max_k, action="prev"))
                else:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k - 1) + '/' + str(max_k), callback_data=cb2.new(id=k - 1, action="prev"))
                next = types.InlineKeyboardButton(text=str(1) + '/' + str(max_k) + ' ‚ñ∂', callback_data=cb2.new(id=1, action="next"))

            else:
                if k - 1 == 0:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(max_k) + '/' + str(max_k), callback_data=cb2.new(id=max_k, action="prev"))
                else:
                    prev = types.InlineKeyboardButton(text='‚óÄ ' + str(k - 1) + '/' + str(max_k), callback_data=cb2.new(id=k - 1, action="prev"))

                next = types.InlineKeyboardButton(text=str(k + 1) + '/' + str(max_k) + ' ‚ñ∂', callback_data=cb2.new(id=k + 1, action="next"))

            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            keyboard.row(prev, next)
            keyboard.row(button1, button2)
            try:
                await call.message.edit_reply_markup(keyboard)

            except aiogram.utils.exceptions.MessageNotModified:
                await call.answer()

        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK, text='my_add')
async def my_add(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_ad = api.get_user_ads(call.from_user.id)
            u_info = api.get_user_info(call.from_user.id)
            name = u_info['username']
            button = types.InlineKeyboardButton(text='üîπ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                                                callback_data='create_ad')

            button2 = types.InlineKeyboardButton(text='üîπ –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                                                 callback_data='delete_ad')

            button3 = types.InlineKeyboardButton(text='üîπ –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç',
                                                 callback_data='edit_min')
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.row(button, button2)
            keyboard.add(button3)

            if len(u_ad) != 0:
                min_lim = u_ad[0]['min_amount']
                max_lim = u_ad[0]['max_amount']
                if u_info['state'] == 'no_deposit':
                    mes = f'<b>üìã –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n</b><b>üë®üèº‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {name}\n\n<b>‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: </b>{min_lim} USDT' \
                          f'\n<b>‚ñ™ –†–µ–∑–µ—Ä–≤: </b>{max_lim} USDT\n\nüî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ\n<i>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ</i>'
                else:
                    mes = f'<b>üìã –ú–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n</b><b>üë®üèº‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {name}\n\n<b>‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: </b>{min_lim} USDT' \
                          f'\n<b>‚ñ™ –†–µ–∑–µ—Ä–≤: </b>{max_lim} USDT\n\nüü¢ –ê–∫—Ç–∏–≤–Ω–æ'

                await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                mes = '<b>üôå –£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.\n</b>'
                await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK, text='my_trades')
async def my_trades(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            trades = api.get_user_trades(call.from_user.id)
            if len(trades) == 0:
                await call.message.answer('‚åõ –£ –í–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫')
            for trade in trades:
                button = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å',
                                                    callback_data=cb2.new(id=str(trade['id']), action="take_order"))
                button2 = types.InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                                                     callback_data=cb2.new(id=str(trade['id']), action="cancel_order"))

                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.row(button, button2)

                await call.message.answer( f'<b>üî• –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞! </b>' + '\n\n'
                                          + '<b>–° –≤–∞—à–µ–≥–æ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: </b>' + str(trade['usdt_amount']) +
                                          ' USDT' + '\n' + '<b>–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ: </b>' + str(trade['coin_amount']) +
                                          ' ' + str(trade['coin']) + '\n\n‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b> ‚ö†Ô∏è\n\n–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Å–∞–Ω–∫—Ü–∏–π!\n<i>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –∫—É—Ä—Å—É USDT/' + str(
                    trade['coin']) + ' –±–∏—Ä–∂–∏ Bittrex</i>',
                                          parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK, text='about_us')
async def about_us(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':

            await call.message.answer('üëã <b>–û —Å–µ—Ä–≤–∏—Å–µ</b>\n\nü¶Ö <b>–≠—Å–∫—Ä–æ—É –∞–≥–µ–Ω—Ç</b> - —Å–≤—è–∑—ã–≤–∞—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å–æ–≤, '
                                      '–∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è –∏—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏.\n\n<b>‚ñ´ –ì–∞—Ä–∞–Ω—Ç–∏—è '
                                      '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏\n‚ñ´ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n‚ñ´ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n‚ñ´ '
                                      '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–≤–æ–¥/–≤—ã–≤–æ–¥</b>', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK,
                           text='support')
async def support(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':

            button1 = types.InlineKeyboardButton(text='‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/'+config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)
            await call.message.answer('üìù –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ '
                                      '–Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n<b>–ü—Ä–æ—Å–∏–º –í–∞—Å —Å–æ–±–ª—é–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π:</b>\n\n‚ñ´ –ß–µ—Ç–∫–æ '
                                      '—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n‚ñ´ –ù–µ '
                                      '–¥—É–±–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–π–¥–µ—Ç –¥–æ –í–∞—Å –æ—á–µ—Ä–µ–¥—å',
                                      reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK,
                           text='comission')
async def comission(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            await call.message.answer('üí∞ –ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–≤–æ–¥–∞:\n\n‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> '
                                      f'USDT - {config.USDT_COMS}\n‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> TRX - {config.TRX_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> XLM - {config.XLM_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> DOT - {config.DOT_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> DOGE - {config.DOGE_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> LUNA - {config.LUNA_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> ADA - {config.ADA_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> MATIC - {config.MATIC_COMS}\n'
                                      f'‚ñ´ <b>–ó–∞ –≤—ã–≤–æ–¥</b> AVAX - {config.AVAX_COMS}\n\nüéâ <b>–ó–∞ –≤–≤–æ–¥</b> –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, '
                                      '—Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏ –≤—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞ –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK,
                           text='conditions')
async def conditions(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            await call.message.answer('üìç <b>–î–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—Å–∏–º –≤–∞—Å —Å–æ–±–ª—é–¥–∞—Ç—å —Ä—è–¥ –ø—Ä–æ—Å—Ç—ã—Ö '
                                      '—É—Å–ª–æ–≤–∏–π:</b>\n\n‚ñ™ –°–æ–≤–µ—Ä—à–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –Ω–∞ '
                                      '–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n‚ñ™ –ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏\n‚ñ™ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ '
                                      '–∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n\n‚ùó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ '
                                      '—Ä–∞–±–æ—Ç—ã.', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK,
                           text='refs')
async def refs(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            code = 'REF'+str(int(u['tg_id']) // 5 + 123)
            await call.message.answer(f'üí∏ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\nüéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π —Å—Ç–∞—Ç—å –º–µ—Ä—á–∞–Ω—Ç–æ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –∏ –ø–æ–ª—É—á–∞–π –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ 30 USDT –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏!\n\n<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: </b><b>{code}</b>', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK,
                           text='partners')
async def partners(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            await call.message.answer('ü§ù <b>–ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç 50+ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É!</b>\n\n<b>–°—Ç–æ—Ä–æ–Ω–Ω–∏–µ '
                                      '—Å–µ—Ä–≤–∏—Å—ã:</b>\n\n<i>‚ñ´Ô∏èBitcasino\n‚ñ´Ô∏èBitStarz\n‚ñ´Ô∏èCloudbet\n‚ñ´Ô∏èFairspin '
                                      'Casino\n‚ñ´Ô∏èFontuneJack</i>', parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK, text='in')
async def in_(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            state = dp.current_state(user=call.from_user.id)
            await state.set_state(States.USER_STATE[0])

            button1 = types.InlineKeyboardButton(text='‚è≥ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏', callback_data='open_dep_orders')
            button2 = types.InlineKeyboardButton(text='‚öí –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data='make_dep_order')
            buttons_ = [button2, button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                '‚¨Ü <b>–í–Ω–µ—Å—Ç–∏ USDT</b> \n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n\n ‚ö† '
                '<b>–í–Ω–∏–º–∞–Ω–∏–µ</b> ‚ö†Ô∏è\n\n‚ñ´ –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ —Ç–æ–ª—å–∫–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.\n'
                '‚ñ´ –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ '
                '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.',
                reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()



@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN | States.LINK, text='out')
async def out(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            button1 = types.InlineKeyboardButton(text='‚è≥ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏', callback_data='open_out_orders')
            button2 = types.InlineKeyboardButton(text='‚öí –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data='make_out_order')
            buttons_ = [button2, button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)
            m = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n<b>‚ö† –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†</b>\n' \
                f'–∫–æ—à–µ–ª—å–∫–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∑–∏–º–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤—ã–≤–æ–¥:\n‚ñ´ <b>USDT</b> - {config.USDT_COMS}\n‚ñ´ ' \
                f'<b>TRX</b> - {config.TRX_COMS}' \
                f'\n‚ñ´ <b>XLM</b> - {config.XLM_COMS}' \
                f'\n‚ñ´ <b>DOGE</b> - {config.DOGE_COMS}' \
                f'\n‚ñ´ <b>DOT</b> - {config.DOT_COMS}' \
                f'\n‚ñ´ <b>ADA</b> - {config.ADA_COMS}' \
                f'\n‚ñ´ <b>LUNA</b> - {config.LUNA_COMS}' \
                f'\n‚ñ´ <b>MATIC</b> - {config.MATIC_COMS}' \
                f'\n‚ñ´ <b>AVAX</b> - {config.AVAX_COMS}\n\nüí°–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π! '

            await call.message.answer('<b>‚¨á –í—ã–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã</b>\n\n' + m, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN, text='dep_in')
async def dep_in(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_info = api.get_user_info(call.from_user.id)
            coin_info = api.get_coin_info('USDT')
            network = coin_info['network_type']
            address = coin_info['address']

            if u_info['state'] == 'working':
                await call.message.answer('ü§ù –í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç. –•–æ—Ä–æ—à–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!')
            elif u_info['state'] == 'no_deposit':
                mes = f'<b>–í–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ {config.DEPOSIT} USDT</b>' + '\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: </b>' + \
                      u_info['address_USDT'] + \
                      '\n' + '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: </b>' + address + \
                      '\n\n' + '<b>‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è</b>\n\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–µ—Ç–∏ </b>' + network + '\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –∏ —Å–µ—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏ TRC-20.'


                order_id = len(api.get_user_orders(call.from_user.id)) + call.from_user.id
                api.add_order(order_id, 'created', call.from_user.id, config.DEPOSIT, 'USDT', u_info['address_USDT'], coin_info['address'],
                              'save_deposit')

                buttons = [
                    types.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=cb2.new(id=str(order_id), action="paid_dep")),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                               callback_data=cb2.new(id=str(order_id), action="cancel_in"))
                ]

                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons)

                await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                state = dp.current_state(user=call.from_user.id)
                await state.set_state(States.USER_STATE[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN, text='dep_out')
async def dep_out(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_info = api.get_user_info(call.from_user.id)
            if u_info['state'] == 'no_deposit':
                await call.message.answer('<b>–£–ø—Å—Å...</b>\n–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ', parse_mode=types.ParseMode.HTML)
            else:
                button1 = types.InlineKeyboardButton(text='–î–∞', callback_data='dep_out_yes')
                button2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='dep_out_no')
                buttons_ = [button1, button2]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons_)
                await call.message.answer('<b>–í—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç?\n–ë–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ '
                                          '–≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n<b>‚ö† –í–Ω–∏–º–∞–Ω–∏–µ '
                                          '‚ö†</b>\n\n–í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –¥–Ω–µ–π, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–π '
                                          '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.', reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN, text='dep_out_yes')
async def dep_out_yes(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            order_id = len(api.get_user_orders(call.from_user.id)) + call.from_user.id
            u_info = api.get_user_info(call.from_user.id)
            if u_info['state'] == 'working':
                api.add_order(order_id, 'created', call.from_user.id, float(config.DEPOSIT), 'USDT', 'undefined',
                              u_info['address_USDT'], 'save_deposit_out')

                await call.message.answer('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.')
                api.change_user_state(u_info['tg_id'], 'no_deposit')
                take = types.InlineKeyboardButton(text="‚öí –í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                                                  callback_data=cb2.new(id=str(order_id), action="take_order_process"))
                buttons = [take,
                    types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—á–µ–Ω–æ",
                                               callback_data=cb2.new(id=str(order_id), action="confirm_withdraw_coins"))
                ]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons)
                adm = api.get_admins()
                for a in adm:
                    await dp.bot.send_message(str(a), f'<b>–í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç </b>' + u_info['username'] + \
                                              '\n\n<b>–°—É–º–º–∞:</b>' + str(config.DEPOSIT) + 'USDT\n\n' + \
                                              '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: </b>' + u_info['address_USDT'],
                                              parse_mode=types.ParseMode.HTML,
                                              reply_markup=keyboard)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN, text='dep_out_no')
async def dep_out_no(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_info = api.get_user_info(call.from_user.id)
            if u_info['state'] == 'no_deposit':
                await call.message.answer('–û—à–∏–±–∫–∞')
                await call.answer()
            else:
                await call.message.answer('‚úÖ')
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state=States.USER_STATE | States.TYPE_AMOUNT | States.CHOOSE_COIN, text='make_dep_order')
async def USDT_TRC_20(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            state = dp.current_state(user=call.from_user.id)
            await state.set_state(States.USER_STATE[0])

            u_info = api.get_user_info(call.from_user.id)
            u_orders = api.get_user_orders(call.from_user.id)
            flag = False
            for o in u_orders:
                if o['type'] == 'deposit' and o['status'] == 'created':
                    flag = True
                    break

            if flag:
                await call.answer('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–≤–æ–¥.')
            else:
                await call.message.answer('<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è '
                                          '—Å—É–º–º–∞: '
                                          '</b>' + str(
                    config.MIN_AMOUNT) + ' USDT' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ' + str(u_info['current_limit']) + ' USDT', parse_mode=types.ParseMode.HTML)

                state = dp.current_state(user=call.from_user.id)
                await state.set_state(States.TYPE_AMOUNT[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.message_handler(state=States.TYPE_AMOUNT)
async def type_amount(msg: types.Message):
    u_info = api.get_user_info(msg.from_user.id)
    try:
        if u_info['state'] != 'banned':
            global amount
            try:
                amount = float(msg.text)
                c_lim = u_info['current_limit']
                if amount > c_lim or amount < config.MIN_AMOUNT:
                    await msg.answer(
                        '<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥...</b>\n\n<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ '
                        '—á–∏—Å–ª–æ)</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>' + str(
                            config.MIN_AMOUNT) + ' USDT' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ' + str(
                            u_info['current_limit']) + ' USDT',
                        parse_mode=types.ParseMode.HTML)

                else:
                    coin_info = api.get_coin_info('USDT')
                    tiker_ = coin_info['tiker']
                    network = coin_info['network_type']
                    address = coin_info['address']
                    mes = '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ </b>' + str(
                        amount) + ' ' + tiker_ + '\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: </b>' + u_info[
                              'address_USDT'] + \
                          '\n' + '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: </b>' + address + \
                          '\n\n' + '<b>‚ö†–í–Ω–∏–º–∞–Ω–∏–µ‚ö†</b>\n\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–µ—Ç–∏ </b>' + network + '\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –∏ —Å–µ—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏ TRC-20.'

                    order_id = len(api.get_user_orders(msg.from_user.id)) + msg.from_user.id
                    api.add_order(order_id, 'created', msg.from_user.id, amount, 'USDT', u_info['address_USDT'], address,
                                  'deposit')

                    buttons = [
                        types.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
                                                   callback_data=cb2.new(id=str(order_id), action="paid")),
                        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                                   callback_data=cb2.new(id=str(order_id), action="cancel_in"))

                    ]
                    keyboard = types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(*buttons)

                    await msg.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    state = dp.current_state(user=msg.from_user.id)
                    await state.set_state(States.USER_STATE[0])

            except ValueError:
                await msg.answer(
                    '<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥...</b>\n\n<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ '
                    '—á–∏—Å–ª–æ)</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>' + str(
                        config.MIN_AMOUNT) + ' USDT' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ' + str(
                        u_info['current_limit']) + ' USDT',
                    parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)



@dp.callback_query_handler(cb2.filter(action=["paid"]), state='*')
async def paid(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            order_id = callback_data["id"]
            order = api.get_order_info(order_id)
            try:
                if order['status'] == 'created':
                    await call.message.answer('üîó –ü—Ä–µ–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ: ')

                    state = dp.current_state(user=call.from_user.id)
                    await state.set_state(States.LINK[0])
                    await call.answer()
                elif order['status'] == 'paid':
                    await call.message.answer('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!')

                async with state.proxy() as data:
                    data['order_id'] = order_id
            except KeyError:
                await call.message.answer('–û—à–∏–±–∫–∞')
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=["cancel_in"]), state='*')
async def cancel_in(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            try:
                order_id = callback_data["id"]
                order = api.get_order_info(order_id)
                if order['status'] != 'created':
                    await call.message.answer('–û—à–∏–±–∫–∞!')
                else:
                    api.delete_order(order_id)
                    await call.message.answer('‚úÖ –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω')
                    await call.answer()
                    state = dp.current_state(user=call.from_user.id)
                    await state.set_state(States.USER_STATE[0])
            except KeyError:
                await call.message.answer('–û—à–∏–±–∫–∞!')
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)

    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=["paid_dep"]), state='*')
async def paid_dep(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            order_id = callback_data["id"]
            order = api.get_order_info(order_id)

            if order['status'] == 'created':
                await call.message.answer('üîó –ü—Ä–µ–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ: ')

                state = dp.current_state(user=call.from_user.id)
                await state.set_state(States.LINK[0])
                await call.answer()
            elif order['status'] == 'paid':
                await call.message.answer('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!')

            async with state.proxy() as data:
                data['order_id'] = order_id
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.message_handler(state=States.LINK)
async def send_link(msg: types.Message, state: FSMContext):
    u = api.get_user_info(msg.from_user.id)
    try:
        if u['state'] != 'banned':
            async with state.proxy() as data:
                order_id = data['order_id']

            link = msg.text
            api.change_order_status(order_id, 'paid')
            u_info = api.get_user_info(msg.from_user.id)
            order = api.get_order_info(order_id)

            await msg.answer(
                '‚úÖ<b>–ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.',
                parse_mode=types.ParseMode.HTML)

            if order['type'] == 'save_deposit':
                take = types.InlineKeyboardButton(text="‚öí –í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                                                  callback_data=cb2.new(id=str(order_id), action="take_order_process"))
                cancel = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                  callback_data=cb2.new(id=str(order_id), action="cancel_user_in"))

                buttons = [take,cancel,
                    types.InlineKeyboardButton(text="üëç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                               callback_data=cb2.new(id=str(order_id), action="confirm_save_dep"))
                ]
                keyboard = types.InlineKeyboardMarkup(row_width=3)
                keyboard.add(*buttons)
                api.set_order_link(order_id, link)
                adm = api.get_admins()
                for a in adm:
                    await dp.bot.send_message(str(a), f'<b>–í–Ω–µ—Å–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç </b>' + u_info['username'] + \
                                              '\n\n<b>–°—É–º–º–∞:</b>' + str(order['amount']) + 'USDT\n\n' + \
                                              '<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: </b>' + link, parse_mode=types.ParseMode.HTML,
                                              reply_markup=keyboard)
            else:
                api.change_current_limit(u_info['tg_id'], order['amount'])
                take = types.InlineKeyboardButton(text="‚öí –í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                                                  callback_data=cb2.new(id=str(order_id), action="take_order_process"))
                cancel = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                    callback_data=cb2.new(id=str(order_id), action="cancel_user_in"))

                buttons = [take,cancel,
                    types.InlineKeyboardButton(text="üëç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                               callback_data=cb2.new(id=str(order_id), action="confirm_dep"))
                ]

                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*buttons)
                api.set_order_link(order_id, link)
                adm = api.get_admins()
                for a in adm:
                    await dp.bot.send_message(str(a), f'<b>–î–µ–ø–æ–∑–∏—Ç –º–æ–Ω–µ—Ç –æ—Ç –æ—Ç </b>' + u_info['username'] + \
                                              '\n\n<b>–°—É–º–º–∞:</b>' + str(order['amount']) + 'USDT\n\n' + \
                                              '<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: </b>' + link, parse_mode=types.ParseMode.HTML,
                                              reply_markup=keyboard)

            state = dp.current_state(user=msg.from_user.id)
            await state.set_state(States.USER_STATE[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await msg.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await msg.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(state='*', text='open_dep_orders')
async def open_orders(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            my_orders = api.get_user_orders(call.from_user.id)
            for order in my_orders:
                if order['type'] == 'deposit':
                    if order['status'] == 'created':
                        coin_info = api.get_coin_info('USDT')
                        tiker_ = coin_info['tiker']
                        network = coin_info['network_type']
                        mes = '<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ </b>' + str(order['amount']) + ' ' + tiker_ + '\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: </b>' + order['from_adr'] + \
                              '\n' + '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: </b>' + order['to_adr'] + \
                              '\n\n' + '<b>‚ö†–í–Ω–∏–º–∞–Ω–∏–µ‚ö†</b>\n\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–µ—Ç–∏ </b>' + network + f'\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –∏ —Å–µ—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏ {network}.'

                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="paid")),
                            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                                       callback_data=cb2.new(id=str(order['id']), action="cancel_in"))

                        ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)

                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


                    elif order['status'] == 'paid':
                        mes = '<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(order['amount']) + ' ' + ' USDT' + '\n<b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: </b>' + order[
                            'from_adr'] + \
                              '\n' + '<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: </b>' + order['to_adr'] + '\n\nüïì –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...'

                        await call.message.answer(mes, parse_mode=types.ParseMode.HTML)
                if order['type'] == 'save_deposit':
                    if order['status'] == 'created':
                        coin_info = api.get_coin_info('USDT')
                        tiker_ = coin_info['tiker']
                        network = coin_info['network_type']
                        mes = '<b>–í–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ </b>' + str(order['amount']) + ' ' + tiker_ + '\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ —Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: </b>' + order['from_adr'] + \
                              '\n' + '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: </b>' + order['to_adr'] + \
                              '\n\n' + '<b>‚ö†–í–Ω–∏–º–∞–Ω–∏–µ‚ö†</b>\n\n<b>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–µ—Ç–∏ </b>' + network + f'\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –∏ —Å–µ—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏ {network}.'

                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="paid")),
                            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                                       callback_data=cb2.new(id=str(order['id']), action="cancel_in"))

                        ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)

                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)


                    elif order['status'] == 'paid':
                        mes = '<b>–í–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(order['amount']) + ' ' + ' USDT' + '\n<b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: </b>' + order[
                            'from_adr'] + \
                              '\n' + '<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: </b>' + order['to_adr'] + '\n\nüïì –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...'

                        await call.message.answer(mes, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


    await call.answer()


@dp.callback_query_handler(state='*', text='make_out_order')
async def make_withdraw(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            coins = api.get_coins()
            buttons_ = []
            for coin in coins:
                b = types.InlineKeyboardButton(text=str(coin['tiker']), callback_data=cb2.new(id=str(coin['tiker']), action="coin_out"))
                buttons_.append(b)

            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons_)

            await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –Ω–∞ –≤—ã–≤–æ–¥: ', reply_markup=keyboard)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=['coin_out']), state='*')
async def coin_out(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            tiker = callback_data['id']
            async with state.proxy() as data:
                data['tiker_for_out'] = tiker
            if tiker != 'USDT':
                network = api.get_coin_info(tiker)['network_type']
                await call.message.answer(f'<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å {tiker} –≤ —Å–µ—Ç–∏ {network}</b>', parse_mode=types.ParseMode.HTML)
                state = dp.current_state(user=call.from_user.id)
                await state.set_state(States.COIN_ADDRESS[0])
            else:
                u_info = api.get_user_info(call.from_user.id)
                async with state.proxy() as data:
                    data['coin_addr'] = u_info['address_USDT']

                coin_balance = u_info[tiker + '_balance']
                min_amount = api.get_min_amount_for_out(tiker)
                coms = api.get_comission(tiker)

                if coin_balance < min_amount:
                    await call.message.answer(
                        f'<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {tiker}.</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {min_amount} {tiker}.',
                        parse_mode=types.ParseMode.HTML)
                else:
                    await call.message.answer(
                        f'<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {tiker} –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>{min_amount} {tiker}' + '\n<b>–î–æ—Å—Ç—É–ø–Ωo:</b> ' + str(
                            coin_balance) + f' {tiker}' + f'\n<b>–ö–æ–º–∏—Å—Å–∏—è: </b>{coms} {tiker}' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: </b>' + str(
                            coin_balance - float(coms)) + f' {tiker}',
                        parse_mode=types.ParseMode.HTML)

                    state = dp.current_state(user=call.from_user.id)
                    await state.set_state(States.COIN_AMOUNT_OUT[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.message_handler(state=States.COIN_ADDRESS)
async def coin_address(msg: types.Message, state: FSMContext):
    coin_addr = msg.text

    async with state.proxy() as data:
        tiker = data['tiker_for_out']

    async with state.proxy() as data:
        data['coin_addr'] = coin_addr

    u_info = api.get_user_info(msg.from_user.id)
    coin_balance = u_info[tiker + '_balance']
    min_amount = api.get_min_amount_for_out(tiker)
    coms =api.get_comission(tiker)

    if coin_balance < min_amount:
        await msg.answer(
            f'<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {tiker}.</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {min_amount} {tiker}.', parse_mode=types.ParseMode.HTML)
    else:
        await msg.answer(
            f'<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {tiker} –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>{min_amount} {tiker}' + '\n<b>–î–æ—Å—Ç—É–ø–Ωo:</b> ' + str(
                coin_balance) + f' {tiker}' + f'\n<b>–ö–æ–º–∏—Å—Å–∏—è: </b>{coms} {tiker}' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: </b>' + str(
                coin_balance - float(coms)) + f' {tiker}',
            parse_mode=types.ParseMode.HTML)

        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(States.COIN_AMOUNT_OUT[0])



@dp.message_handler(state=States.COIN_AMOUNT_OUT)
async def withdraw_coins(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        tiker_for_out = data['tiker_for_out']
        coin_addr = data['coin_addr']

    coin_info = api.get_coin_info(tiker_for_out)
    order_id = len(api.get_user_orders(msg.from_user.id)) + msg.from_user.id
    u_info = api.get_user_info(msg.from_user.id)
    coin_balance = u_info[tiker_for_out + '_balance']
    coin_comission = api.get_comission(tiker_for_out)
    coin_min_amount = api.get_min_amount_for_out(tiker_for_out)

    try:
        coin_amount = float(msg.text)
        if float(coin_amount) > float(coin_balance) - coin_comission or float(coin_amount) < api.get_min_amount_for_out(tiker_for_out):
            await msg.answer(
                f'<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥...</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>{coin_min_amount} {tiker_for_out}' + '\n<b>–î–æ—Å—Ç—É–ø–Ωo:</b> ' + str(
                    coin_balance) + f' {tiker_for_out}' + f'\n<b>–ö–æ–º–∏—Å—Å–∏—è: </b>{coin_comission} {tiker_for_out}' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: </b>' + str(
                    coin_balance - coin_comission) + f' {tiker_for_out}',
                parse_mode=types.ParseMode.HTML)
            state = dp.current_state(user=msg.from_user.id)
            await state.set_state(States.COIN_AMOUNT_OUT[0])
        else:
            api.add_order(order_id, 'created', msg.from_user.id, float(coin_amount), tiker_for_out,
                          coin_info['address'],
                          coin_addr, 'withdraw')

            await msg.answer(f'‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {tiker_for_out} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.')
            api.change_coin_balance(msg.from_user.id, float(coin_amount) + coin_comission, 'minus', tiker_for_out)
            take = types.InlineKeyboardButton(text="‚öí –í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                                              callback_data=cb2.new(id=str(order_id), action="take_order_process"))

            buttons = [take,
                       types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—á–µ–Ω–æ",
                                                  callback_data=cb2.new(id=str(order_id),
                                                                        action="confirm_withdraw_coins"))
                       ]
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(*buttons)
            adm = api.get_admins()
            for a in adm:
                await dp.bot.send_message(str(a), f'<b>–í—ã–≤–æ–¥ –º–æ–Ω–µ—Ç –æ—Ç –æ—Ç </b>' + u_info['username'] + \
                                          '\n\n<b>–°—É–º–º–∞:</b>' + str(coin_amount) + f'{tiker_for_out}\n\n' + \
                                          '<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: </b>' + coin_addr, parse_mode=types.ParseMode.HTML,
                                          reply_markup=keyboard)

            state = dp.current_state(user=msg.from_user.id)
            await state.set_state(States.USER_STATE[0])

    except ValueError:
        await msg.answer(
            f'<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥...</b>\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: </b>{coin_min_amount} {tiker_for_out}' + '\n<b>–î–æ—Å—Ç—É–ø–Ωo:</b> ' + str(
                coin_balance) + f' {tiker_for_out}' + f'\n<b>–ö–æ–º–∏—Å—Å–∏—è: </b>{coin_comission} {tiker_for_out}' + '\n<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: </b>' + str(
                coin_balance - coin_comission) + f' {tiker_for_out}',
            parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(state='*', text='open_out_orders')
async def open_withdraw_orders(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            my_orders = api.get_user_orders(call.from_user.id)
            for order in my_orders:
                if order['type'] == 'withdraw':
                    if order['status'] == 'created':
                        mes = '<b>–í—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüïì –í –æ–±—Ä–∞–±–æ—Ç–∫–µ...'


                        await call.message.answer(mes, parse_mode=types.ParseMode.HTML)


                    elif order['status'] == 'paid':
                        mes = '<b>–í—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüíØ –û–ø–ª–∞—á–µ–Ω–∞\n\n<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ</b>'

                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="confirm")),
                            types.InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="not_confirm"))
                        ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)

                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    elif order['status'] == 'dispute':
                        mes = '<b>–í—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüíØ –û–ø–ª–∞—á–µ–Ω–∞\n\n<b>üßëüèº‚Äç‚úà –î–∏—Å–ø—É—Ç</b>'
                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –î–∏—Å–ø—É—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω",
                                                       callback_data=cb2.new(id=str(order['id']), action="confirm")),
                                            ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)
                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

                if order['type'] == 'save_deposit_out':
                    if order['status'] == 'created':
                        mes = '<b>–í—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüïì –í –æ–±—Ä–∞–±–æ—Ç–∫–µ...'


                        await call.message.answer(mes, parse_mode=types.ParseMode.HTML)


                    elif order['status'] == 'paid':
                        mes = '<b>–í—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüíØ –û–ø–ª–∞—á–µ–Ω–∞\n\n<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ</b>'

                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="confirm")),
                            types.InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ",
                                                       callback_data=cb2.new(id=str(order['id']), action="not_confirm"))
                        ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)

                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                    elif order['status'] == 'dispute':
                        mes = '<b>–í—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n' + '<b>–°—É–º–º–∞: </b>' + str(
                            order['amount']) + ' ' + order['cryptocurrency'] + '\n<b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: </b>' + order['to_adr'] + '\n\nüíØ –û–ø–ª–∞—á–µ–Ω–∞\n\n<b>üßëüèº‚Äç‚úà –î–∏—Å–ø—É—Ç</b>'

                        buttons = [
                            types.InlineKeyboardButton(text="‚úÖ –î–∏—Å–ø—É—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω",
                                                       callback_data=cb2.new(id=str(order['id']), action="confirm")),
                                            ]
                        keyboard = types.InlineKeyboardMarkup(row_width=2)
                        keyboard.add(*buttons)
                        await call.message.answer(mes, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=["confirm"]), state='*')
async def confirm_payment(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            try:
                order_id = callback_data["id"]
                api.change_order_status(order_id, 'confirmed')
                await call.message.answer('üîí –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞')
                api.delete_order(order_id)
                await call.answer()
            except KeyError:
                await call.message.answer('–û—à–∏–±–∫–∞!')
            await call.answer()
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(cb2.filter(action=["not_confirm"]), state='*')
async def not_confirm_payment(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            try:
                order_id = callback_data["id"]
                api.change_order_status(order_id, 'dispute')
                await call.message.answer('<b>üßëüèº‚Äç‚úà –û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç</b>\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.', parse_mode=types.ParseMode.HTML)
                await call.answer()
            except KeyError:
                await call.message.answer('–û—à–∏–±–∫–∞!')
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(state='*', text='create_ad')
async def create_ad(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_ads = api.get_user_ads(call.from_user.id)
            u_info = api.get_user_info(call.from_user.id)
            if u_info['state'] == 'no_deposit':
                button1 = types.InlineKeyboardButton(text='‚¨Ü –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç', callback_data='dep_in')
                buttons_ = [button1]
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                keyboard.add(*buttons_)
                await call.message.answer(f'üîê –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç <b>{config.DEPOSIT} USDT</b>.\n\n'
                                          '‚ùì <b>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ</b>\n\n–°—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ '
                                          '–∑–∞—â–∏—â–∞—é—â–∞—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—â–∞—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ '
                                          '—Å–¥–µ–ª–æ–∫ –≤ —Å–ª—É—á–∞–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä—á–∞–Ω—Ç–æ–º –∑–∞—è–≤–∫–∏\n\n<b>‚ö†Ô∏è –í–∞–∂–Ω–æ ‚ö†Ô∏è</b>\n\n–í—ã –∏–º–µ–µ—Ç–µ '
                                          '–ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –µ–µ '
                                          '—É—Å–ª–æ–≤–∏—è.\n\n–í —Å–ª—É—á–∞–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–µ–ø–æ–∑–∏—Ç '
                                          '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –Ω–∞ USDT –∫–æ—à–µ–ª—ë–∫',
                                          parse_mode=types.ParseMode.HTML, reply_markup=keyboard)

            elif len(u_ads) > 0:
                await call.answer('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!')

            else:
                u_info = api.get_user_info(call.from_user.id)
                if u_info['USDT_balance'] < 1:
                    await call.message.answer('<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å...</b>\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ—à–µ–ª–µ–∫ ‚û° –í–≤–æ–¥ ‚û° –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b>',
                                              parse_mode=types.ParseMode.HTML)
                else:
                    await call.message.answer('üìù –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–∫–∏')

                    state = dp.current_state(user=call.from_user.id)
                    await state.set_state(States.MIN_LIMIT_STATE[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.message_handler(state=States.MIN_LIMIT_STATE)
async def ad_min_limit(msg: types.Message, state: FSMContext):
    try:
        min_limit = float(msg.text)
        async with state.proxy() as data:
            data['min_limit'] = min_limit

        ad_id = len(api.get_user_ads(msg.from_user.id)) + msg.from_user.id
        amount_ = api.get_user_info(msg.from_user.id)['USDT_balance']
        api.add_ad(ad_id, msg.from_user.id, float(min_limit), amount_)

        await msg.answer('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(States.USER_STATE[0])

    except ValueError:
        await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥... –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')


@dp.callback_query_handler(state='*', text='delete_ad')
async def delete_ad(call: types.CallbackQuery):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_ad = api.get_user_ads(call.from_user.id)
            for ad in u_ad:
                api.delete_ad(ad['id'])

            await call.answer('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(state='*', text='edit_min')
async def edit_min(call: types.CallbackQuery, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            u_ad = api.get_user_ads(call.from_user.id)
            if len(u_ad) == 0:
                await call.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
            else:
                await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–∫–∏:')
                ad_id = u_ad[0]['id']
                async with state.proxy() as data:
                    data['ad_id'] = ad_id

                    state = dp.current_state(user=call.from_user.id)
                    await state.set_state(States.CHANGE_MIN_LIMIT[0])
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.message_handler(state=States.CHANGE_MIN_LIMIT)
async def new_min_limit(msg: types.Message, state: FSMContext):
    try:
        new_lim = float(msg.text)
        async with state.proxy() as data:
            ad_id = data['ad_id']

        api.change_ad_min(ad_id, new_lim)
        await msg.answer('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(States.USER_STATE[0])
    except ValueError:
        await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥... –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')


@dp.callback_query_handler(cb2.filter(action=["user_ad"]), state='*')
async def user_ad(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            ad_id = callback_data['id']
            date = datetime.now()
            ad = api.get_ad_info(ad_id)
            owner_info = api.get_user_info(ad['owner_id'])

            reg_date = datetime.strptime(owner_info['reg_date'], '%Y-%m-%d')
            active_period = (date - reg_date).days
            lim = owner_info['limit']
            if float(lim) < 10001:
                status = 'Bronze ü•â'

            elif 10000 < float(lim) < 25001:
                status = 'Silver ü•à'

            elif 25000 < float(lim) < 50001:
                status = 'Gold ü•â'

            elif float(lim) > 50000:
                status = 'Diamond üíé'

            if 4 >= active_period % 10 <= 2:
                mes_active_per = str(active_period) + ' –¥–Ω—è'
            elif active_period % 10 == 1:
                mes_active_per = str(active_period) + ' –¥–µ–Ω—å'
            elif 19 >= active_period >= 11:
                mes_active_per = str(active_period) + '–¥–Ω–µ–π'
            else:
                mes_active_per = str(active_period) + ' –¥–Ω–µ–π'

            min_lim = ad['min_amount']
            max_lim = ad['max_amount']
            mes = 'üôçüèº‚Äç‚ôÇ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> ' + owner_info['username'] + ': ' + status + '\n\n' + \
                  '<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: </b>' + mes_active_per + \
                  '\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: </b>' + str(owner_info['trade_count']) + \
                  '\n<b>–û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: </b>' + str(owner_info['trade_amount']) + ' USDT' + f'\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: </b>{min_lim} USDT' \
                  f'\n<b>–†–µ–∑–µ—Ä–≤: </b>{max_lim} USDT' + \
                  '\n\n\n\n' + '<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –Ω–∞ –æ–±–º–µ–Ω –º–æ–Ω–µ—Ç. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.</i>'

            await call.message.answer(mes, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()


@dp.callback_query_handler(cb2.filter(action=["fake_ad"]), state='*')
async def user_ad(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    u = api.get_user_info(call.from_user.id)
    try:
        if u['state'] != 'banned':
            ad_id = callback_data['id']
            date = datetime.now()
            ad = api.get_fake_info(ad_id)

            reg_date = datetime.strptime(ad['reg_date'], '%Y-%m-%d')
            active_period = (date - reg_date).days
            lim = ad['max_amount']
            if float(lim) < 10001:
                status = 'Bronze ü•â'

            elif 10000 < float(lim) < 25001:
                status = 'Silver ü•à'

            elif 25000 < float(lim) < 50001:
                status = 'Gold ü•â'

            elif float(lim) > 50000:
                status = 'Diamond üíé'

            if 4 >= active_period % 10 <= 2:
                mes_active_per = str(active_period) + ' –¥–Ω—è'
            elif active_period % 10 == 1:
                mes_active_per = str(active_period) + ' –¥–µ–Ω—å'
            elif 19 >= active_period >= 11:
                mes_active_per = str(active_period) + '–¥–Ω–µ–π'
            else:
                mes_active_per = str(active_period) + ' –¥–Ω–µ–π'

            min_lim = ad['min_amount']
            max_lim = ad['max_amount']

            mes = 'üôçüèº‚Äç‚ôÇ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> ' + ad['owner_name'] + ': ' + status + '\n\n' + \
                  '<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: </b>' + mes_active_per + \
                  '\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: </b>' + str(ad['trade_number']) + \
                  '\n<b>–û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: </b>' + str(ad['trade_amount']) + ' USDT\n\n' + f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: </b>{min_lim} USDT' \
                  f'\n<b>–†–µ–∑–µ—Ä–≤: </b>{max_lim} USDT' + \
                  '\n\n\n\n' + '<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –Ω–∞ –æ–±–º–µ–Ω –º–æ–Ω–µ—Ç. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.</i>'

            await call.message.answer(mes, parse_mode=types.ParseMode.HTML)
        else:
            button1 = types.InlineKeyboardButton(text='üì≤ –°–≤—è–∑–∞—Ç—å—Å—è', url='https://t.me/' + config.SUPPORT)
            buttons_ = [button1]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons_)

            await call.message.answer(
                f'‚ùÑ <b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞.',
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    except KeyError:
        await call.message.answer(f'<b>–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.</b>',
                                  parse_mode=types.ParseMode.HTML)

    await call.answer()